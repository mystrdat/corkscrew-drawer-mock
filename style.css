/*
  github.com/mystrdat/gonzo-stack
  @mixin ============================= */
/*
  inStyle (v1.6.3)
  github.com/salsita/inStyle
  2016 | MIT
  @mixin ============================= */
/*! normalize-scss | MIT/GPLv2 License | bit.ly/normalize-scss */
/**
     * 1. Change the default font family in all browsers (opinionated).
     * 2. Prevent adjustments of font size after orientation changes in IE and iOS.
     */
html {
  font-family: sans-serif;
  /* 1 */
  -ms-text-size-adjust: 100%;
  /* 2 */
  -webkit-text-size-adjust: 100%;
  /* 2 */ }

/**
     * Remove the margin in all browsers (opinionated).
     */
body {
  margin: 0; }

/* HTML5 display definitions
       ========================================================================== */
/**
     * Add the correct display in IE <10.
     * Add the correct display in Edge, IE, and Firefox for `details` or `summary`.
     * Add the correct display in IE for `main`.
     */
article,
aside,
details,
figcaption,
figure,
footer,
header,
main,
menu,
nav,
section,
summary {
  display: block; }

/**
     * Add the correct display in IE <10.
     */
audio,
canvas,
progress,
video {
  display: inline-block; }

/**
     * Add the correct display and remove excess height in iOS 4-7.
     */
audio:not([controls]) {
  display: none;
  height: 0; }

/**
     * Add the correct vertical alignment in Chrome, Firefox, and Opera.
     */
progress {
  vertical-align: baseline; }

/**
     * Add the correct display in IE <11, Safari <8, and Firefox <22.
     * 1. Add the correct display in IE.
     */
template,
[hidden] {
  display: none; }

/* Links
       ========================================================================== */
/**
     * 1. Remove the gray background on active links in IE 10.
     * 2. Remove gaps in links underline in iOS 8+ and Safari 8+.
     */
a {
  background-color: transparent;
  /* 1 */
  -webkit-text-decoration-skip: objects;
  /* 2 */ }

/**
     * Remove the outline on focused links when they are also active or hovered
     * in all browsers (opinionated).
     */
a:active,
a:hover {
  outline-width: 0; }

/* Text-level semantics
       ========================================================================== */
/**
     * 1. Remove the bottom border in Firefox <40.
     * 2. Add the correct text decoration in Chrome, Edge, IE, Opera, and Safari.
     */
abbr[title] {
  border-bottom: none;
  /* 1 */
  text-decoration: underline;
  /* 2 */
  text-decoration: underline dotted;
  /* 2 */ }

/**
     * Prevent the duplicate application of `bolder` by the next rule in Safari 6.
     */
b,
strong {
  font-weight: inherit; }

/**
     * Add the correct font weight in Chrome, Edge, and Safari.
     */
b,
strong {
  font-weight: bolder; }

/**
     * 1. Correct the inheritance and scaling of font size in all browsers.
     * 2. Correct the odd `em` font sizing in all browsers.
     */
code,
kbd,
samp {
  font-family: monospace, monospace;
  font-size: 1em; }

/**
     * Add the correct font style in Android <4.4.
     */
dfn {
  font-style: italic; }

/**
     * Correct the font size and margin on `h1` elements within `section` and
     * `article` contexts in Chrome, Firefox, and Safari.
     */
h1 {
  font-size: 2em;
  /* Set 1 unit of vertical rhythm on the top and bottom margins. */
  margin: 0.75em 0; }

/**
     * Add the correct background and color in IE <10.
     */
mark {
  background-color: #ff0;
  color: #000; }

/**
     * Add the correct font size in all browsers.
     */
small {
  font-size: 80%; }

/**
     * Prevent `sub` and `sup` elements from affecting the line height in
     * all browsers.
     */
sub,
sup {
  font-size: 75%;
  line-height: 0;
  position: relative;
  vertical-align: baseline; }

sub {
  bottom: -0.25em; }

sup {
  top: -0.5em; }

/* Embedded content
       ========================================================================== */
/**
     * Remove the border on images inside links in IE <11.
     */
img {
  border-style: none; }

/**
     * Hide the overflow in IE.
     */
svg:not(:root) {
  overflow: hidden; }

/* Grouping content
       ========================================================================== */
/**
     * Add the correct margin in IE 8.
     */
figure {
  margin: 1.5em 40px; }

/**
     * 1. Add the correct box sizing in Firefox.
     * 2. Show the overflow in Edge and IE.
     */
hr {
  box-sizing: content-box;
  /* 1 */
  height: 0;
  /* 1 */
  overflow: visible;
  /* 2 */ }

pre {
  font-family: monospace, monospace;
  font-size: 1em; }

/* Forms
       ========================================================================== */
/**
     * Known issues:
     * - By default, Chrome on OS X and Safari on OS X allow very limited styling of
     *   select, unless a border property is set. The default font weight on
     *   optgroup elements cannot safely be changed in Chrome on OSX and Safari on
     *   OS X.
     * - It is recommended that you do not style checkbox and radio inputs as
     *   Firefox's implementation does not respect box-sizing, padding, or width.
     * - Certain font size values applied to number inputs cause the cursor style of
     *   the decrement button to change from default to text.
     * - The search input is not fully stylable by default. In Chrome and Safari on
     *   OSX/iOS you can't control font, padding, border, or background. In Chrome
     *   and Safari on Windows you can't control border properly. It will apply
     *   border-width but will only show a border color (which cannot be controlled)
     *   for the outer 1px of that border. Applying -webkit-appearance: textfield
     *   addresses these issues without removing the benefits of search inputs (e.g.
     *   showing past searches). Safari (but not Chrome) will clip the cancel button
     *   on when it has padding (and textfield appearance).
     */
/**
     * 1. Change font properties to `inherit` in all browsers (opinionated).
     * 2. Remove the margin in Firefox and Safari.
     * 3. Address `font-family` inconsistency between `textarea` and other form in IE 7
     * 4. Improve appearance and consistency with IE 6/7.
     */
button,
input,
optgroup,
select,
textarea {
  font: inherit;
  /* 1 */
  margin: 0;
  /* 2 */ }

/**
     * Show the overflow in IE.
     */
button {
  overflow: visible; }

/**
     * Remove the inheritance of text transform in Edge, Firefox, and IE.
     * 1. Remove the inheritance of text transform in Firefox.
     */
button,
select {
  /* 1 */
  text-transform: none; }

/**
     * 1. Prevent a WebKit bug where (2) destroys native `audio` and `video`
     *    controls in Android 4.
     * 2. Correct the inability to style clickable types in iOS and Safari.
     */
button,
html [type="button"],
[type="reset"],
[type="submit"] {
  -webkit-appearance: button;
  /* 2 */ }

button,
[type="button"],
[type="reset"],
[type="submit"] {
  /**
       * Remove the inner border and padding in Firefox.
       */
  /**
       * Restore the focus styles unset by the previous rule.
       */ }
  button::-moz-focus-inner,
  [type="button"]::-moz-focus-inner,
  [type="reset"]::-moz-focus-inner,
  [type="submit"]::-moz-focus-inner {
    border-style: none;
    padding: 0; }
  button:-moz-focusring,
  [type="button"]:-moz-focusring,
  [type="reset"]:-moz-focusring,
  [type="submit"]:-moz-focusring {
    outline: 1px dotted ButtonText; }

/**
     * Show the overflow in Edge.
     */
input {
  overflow: visible; }

/**
     * 1. Add the correct box sizing in IE <11.
     * 2. Remove the padding in IE <11.
     * 3. Remove excess padding in IE 7.
     *    Known issue: excess padding remains in IE 6.
     */
[type="checkbox"],
[type="radio"] {
  box-sizing: border-box;
  /* 1 */
  padding: 0;
  /* 2 */ }

/**
     * Correct the cursor style of increment and decrement buttons in Chrome.
     */
[type="number"]::-webkit-inner-spin-button,
[type="number"]::-webkit-outer-spin-button {
  height: auto; }

/**
     * 1. Correct the odd appearance in Chrome and Safari.
     * 2. Correct the outline style in Safari.
     */
[type="search"] {
  -webkit-appearance: textfield;
  /* 1 */
  outline-offset: -2px;
  /* 2 */
  /**
       * Remove the inner padding and cancel buttons in Chrome and Safari on OS X.
       */ }
  [type="search"]::-webkit-search-cancel-button, [type="search"]::-webkit-search-decoration {
    -webkit-appearance: none; }

/**
     * Correct the text style of placeholders in Chrome, Edge, and Safari.
     */
::-webkit-input-placeholder {
  color: inherit;
  opacity: 0.54; }

/**
     * 1. Correct the inability to style clickable types in iOS and Safari.
     * 2. Change font properties to `inherit` in Safari.
     */
::-webkit-file-upload-button {
  -webkit-appearance: button;
  /* 1 */
  font: inherit;
  /* 2 */ }

/**
     * Change the border, margin, and padding in all browsers (opinionated).
     */
fieldset {
  border: 1px solid #c0c0c0;
  margin: 0 2px;
  padding: 0.35em 0.625em 0.75em; }

/**
     * 1. Correct the text wrapping in Edge and IE.
     * 2. Correct the color inheritance from `fieldset` elements in IE.
     * 3. Remove the padding so developers are not caught out when they zero out
     *    `fieldset` elements in all browsers.
     * 4. Correct alignment displayed oddly in IE 6/7.
     */
legend {
  box-sizing: border-box;
  /* 1 */
  display: table;
  /* 1 */
  max-width: 100%;
  /* 1 */
  white-space: normal;
  /* 1 */
  color: inherit;
  /* 2 */
  padding: 0;
  /* 3 */ }

/**
     * Restore the font weight unset by a previous rule.
     */
optgroup {
  font-weight: bold; }

/**
     * Remove the default vertical scrollbar in IE.
     */
textarea {
  overflow: auto; }

/*
  layout-tools
  @mixin ============================= */
/*
  layout-tools | align
  @mixin ============================= */
/*
  layout-tools | grid
  @mixin ============================= */
/*
  layout-tools | pos
  @mixin ============================= */
/*
  layout-tools | remove-from-list
  @mixin ============================= */
/*
  layout-tools | clearfix
  @mixin ============================= */
/*
  layout-tools | hide-text
  @mixin ============================= */
/*
  layout-tools | truncate
  @mixin ============================= */
/*
  layout-tools | scrollable
  @mixin ============================= */
/*
  layout-tools | unselectable
  @mixin ============================= */
/*
  layout-tools | aspect-ratio
  @mixin ============================= */
/*
  layout-tools | background-retina
  @mixin ============================= */
/*
  layout-tools | append-filename
  @mixin ============================= */
/*
  layout-tools | str-reverse
  @mixin ============================= */
/*
  layout-tools | pseudo
  @mixin ============================= */
/*
  layout-tools | em, rem
  @mixin ============================= */
/*
  layout-tools | to-number
  @mixin ============================= */
/*
  layout-tools | to-length
  @mixin ============================= */
/*
  layout-tools | strip-unit
  @mixin ============================= */
/*
  Config
  @mixin ============================= */
/*
  Base
  @mixin ============================= */
*, *:before, *:after {
  box-sizing: inherit; }

html {
  height: 100%;
  position: relative;
  box-sizing: border-box;
  font-size: 62.5%;
  text-size-adjust: 100%; }

body {
  min-width: 320px;
  height: 100%;
  font-family: "PT Serif", serif;
  font-size: 1.6rem;
  font-weight: 300;
  color: #222; }

ul,
ol {
  list-style: none;
  padding: 0; }

img {
  max-width: 100%;
  width: auto;
  height: auto; }

*:focus {
  outline: none; }

[disabled] {
  cursor: default; }

.hidden,
[hidden] {
  display: none; }

/*
  Layout
  @mixin ============================= */
.view {
  position: relative;
  height: 100%;
  background: #111114 url(assets/gradient.png) no-repeat left top/100% auto; }
  .view .bottle {
    position: absolute;
    left: 0;
    top: 0;
    right: 0;
    bottom: 0;
    background: url(assets/bottle.png) no-repeat left top/100% auto;
    transition: all 2000ms ease-in-out; }
    .active .view .bottle {
      transform: translateY(-50px); }
  .view .label {
    position: absolute;
    left: 0;
    top: 0;
    right: 0;
    bottom: 0;
    background: url(assets/label.png) no-repeat left top/100% auto;
    transition: all 2000ms ease-in-out; }
    .active .view .label {
      transform: translateY(-50px); }
  .view .overlay {
    position: absolute;
    left: 0;
    top: 0;
    right: 0;
    bottom: 0;
    background-color: transparent;
    transition: background-color 2000ms ease-in-out;
    pointer-events: none; }
    .active .view .overlay {
      background-color: rgba(0, 0, 0, 0.6); }
  .view .restaurant {
    position: absolute;
    left: 50%;
    top: 29.3vh;
    transform: translate(-50%, 0);
    font-weight: 700;
    color: #111;
    transition: all 2000ms ease-in-out; }
    .active .view .restaurant {
      opacity: 0;
      transform: translate(-50%, -50px); }
  .view .wine {
    position: absolute;
    left: 50%;
    top: 37vh;
    transform: translate(-50%, 0);
    width: 100%;
    height: 44px;
    font-weight: 700;
    font-size: 18px;
    text-align: left;
    color: #811B34;
    transition: all 2000ms ease-in-out; }
    .active .view .wine {
      position: absolute;
      left: 50%;
      top: 2.5vh;
      transform: translate(-50%, 0); }
    .view .wine .row {
      line-height: 22px;
      display: block;
      white-space: nowrap;
      transition: all 2000ms ease-in-out; }
      .active .view .wine .row {
        color: #fff; }
    .view .wine .row1 {
      position: absolute;
      left: 50%;
      top: 0;
      transform: translate(-50%, 0); }
      .active .view .wine .row1 {
        position: absolute;
        left: 15px;
        top: 0;
        transform: none; }
    .view .wine .row2 {
      position: absolute;
      left: 50%;
      bottom: 0;
      transform: translate(-50%, 0); }
      .active .view .wine .row2 {
        position: absolute;
        left: 15px;
        bottom: 0;
        transform: none; }
  .view .price {
    position: absolute;
    left: 50%;
    top: 45.5vh;
    transform: translate(-50%, 0);
    font-size: 14px;
    transition: all 2000ms ease-in-out; }
    .active .view .price {
      opacity: 0;
      transform: translate(-50%, -50px); }
  .view .rating {
    position: absolute;
    left: 50%;
    top: 49.5vh;
    transform: translate(-50%, 0);
    font-size: 12px;
    line-height: 20px;
    border: 1px solid #E0E0DE;
    border-radius: 10px;
    padding: 0 10px 0 30px;
    background: #F9F9F7 url(assets/icon-star.png) no-repeat 10px 50%/13px auto;
    transition: all 2000ms ease-in-out; }
    .active .view .rating {
      opacity: 0;
      transform: translate(-50%, -50px); }
  .view .location {
    position: absolute;
    left: 50%;
    top: 57vh;
    transform: translate(-50%, 0);
    width: 60%;
    text-align: center;
    transition: all 2000ms ease-in-out; }
    .active .view .location {
      opacity: 0;
      transform: translate(-50%, -50px); }
  .view .others {
    position: absolute;
    left: 15;
    top: 11vh;
    color: #fff;
    opacity: 0;
    font-size: 14px;
    transform: translateX(0px);
    transition: all 400ms ease-in-out; }
    .active .view .others {
      opacity: 0.4;
      transform: translateX(15px);
      transition: all 2000ms ease-in-out 450ms; }

/*
  Drawer
  @mixin ============================= */
.drawer {
  width: 100%;
  position: fixed;
  bottom: 0;
  left: 0;
  transform: translateY(calc(100% - 45px));
  transition: transform 2000ms ease-in-out 100ms;
  will-change: transform;
  background-color: #fff; }
  .active .drawer {
    transform: translateY(0); }
  .drawer header {
    position: relative;
    height: 45px;
    color: #fff;
    background-color: #800020; }
    .drawer header .dish,
    .drawer header .add-dish,
    .drawer header .show-dishes {
      line-height: 24px; }
    .drawer header .dish {
      position: absolute;
      left: 50%;
      top: 50%;
      transform: translate(-50%, -50%);
      text-align: center;
      opacity: 0;
      transition: all 2000ms ease-in-out;
      transform: translate(calc(-50% - 30px), -50%) scale(0.01); }
      .active .drawer header .dish {
        opacity: 1;
        transform: translate(-50%, -50%) scale(1); }
    .drawer header .add-dish {
      position: absolute;
      left: 0;
      top: 50%;
      transform: translate(0, -50%);
      width: 50%;
      background: url(assets/icon-cutlery.png) no-repeat 30px 50%/auto 16px;
      padding-left: 70px;
      transition: all 2000ms ease-in-out;
      border-right: 1px solid rgba(255, 255, 255, 0.4);
      transform-origin: 0 50%; }
      .active .drawer header .add-dish {
        opacity: 0;
        transform: translate(-30px, -50%) scale(0.7); }
    .drawer header .show-dishes {
      position: absolute;
      right: 46px;
      bottom: 50%;
      transform: translate(0, 50%);
      transition: all 2000ms ease-in-out;
      transform-origin: 100% 50%; }
      .active .drawer header .show-dishes {
        opacity: 0;
        transform: translate(30px, 50%) scale(0.7); }
    .drawer header .chevron {
      position: absolute;
      right: 20px;
      bottom: 50%;
      transform: translate(0, 50%);
      width: 16px;
      height: 30px;
      background: url(assets/icon-chevron.png) no-repeat 50%/14px auto;
      transition: all 2000ms ease-in-out; }
      .active .drawer header .chevron {
        transform: rotate(180deg) translateY(-50%); }
  .drawer main {
    position: relative;
    text-align: center;
    height: 75vh; }
    .drawer main blockquote {
      position: absolute;
      left: 50%;
      top: 50%;
      transform: translate(-50%, -50%);
      margin: 0;
      display: block;
      font-style: italic;
      font-size: 24px;
      color: #999; }
      .drawer main blockquote:before {
        content: '\201C'; }
      .drawer main blockquote:after {
        content: '\201D'; }
    .drawer main span {
      position: absolute;
      left: 50%;
      top: 50%;
      transform: translate(-50%, -50%);
      margin-top: 55px;
      font-size: 16px;
      font-style: italic;
      color: #ccc; }

/*# sourceMappingURL=data:application/json;charset=utf8;base64, */
